import cv2
import numpy as np
from PIL import ImageGrab
import pytesseract

# Set the path to the Tesseract executable (change this if necessary)
pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

# Set the coordinates for the selected rectangular area
x, y, width, height = 100, 100, 300, 100

while True:
    # Capture the screen frame
    screenshot = ImageGrab.grab()

    # Convert the screenshot to an OpenCV image
    frame = np.array(screenshot)

    # Extract the selected rectangular area
    selected_area = frame[y:y+height, x:x+width]

    # Convert the selected area to grayscale
    gray_image = cv2.cvtColor(selected_area, cv2.COLOR_BGR2GRAY)

    # Apply thresholding to enhance text visibility
    _, thresholded = cv2.threshold(gray_image, 0, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)

    # Perform OCR on the thresholded image
    player_name = pytesseract.image_to_string(thresholded)

    # Display the captured frame and OCR result
    cv2.imshow("Screen Capture", frame)
    cv2.imshow("Selected Area", selected_area)
    print("Detected Player Name:", player_name.strip())

    # Check for the 'q' key to exit the loop
    if cv2.waitKey(1) == ord('q'):
        break

# Release resources and close windows
cv2.destroyAllWindows()
 select @cols_ac = COALESCE(@cols_ac + ',','') 
        + QUOTENAME(LoanRange_AC), @cols_pd = COALESCE(@cols_pd + ',','') 
        + QUOTENAME(LoanRange_PD), @cols_sd = COALESCE(@cols_sd + ',','') 
        + QUOTENAME(LoanRange_SD), @cols_po = COALESCE(@cols_po + ',','') 
        + QUOTENAME(LoanRange_PO), @cols_so = COALESCE(@cols_so + ',','') 
        + QUOTENAME(LoanRange_SO), @cols_to = COALESCE(@cols_to + ',','') 
        + QUOTENAME(LoanRange_TO)
    from #RangeTable


    set @query = N'SELECT ASADivision, ASADistrict, ASARegion, LoanProduct, LoanCategory, ' + @cols_ac +', ' + @cols_pd +', ' + @cols_sd +', ' + @cols_po +', ' + @cols_so +', ' + @cols_to +'
    from #ResultTable 
    pivot 
    (
        max(Accounts) 
            for LoanRange_AC in (' + @cols_ac + ')
    ) AS Q
    pivot
    (
        max(TotalPrinDisbAmount) 
            for LoanRange_PD in (' + @cols_pd + ')
    ) AS R
    pivot
    (
        max(TotalSCDisbAmount) 
            for LoanRange_SD in (' + @cols_sd + ')
    ) AS S
    pivot
    (
        max(TotalPrinOSAmount) 
            for LoanRange_PO in (' + @cols_po + ')
    ) AS T
    pivot
    (
        max(TotalSCOutstandingAmount) 
            for LoanRange_SO in (' + @cols_so + ')
    ) AS U
    pivot
    (
        max(TotalOSAmount) 
            for LoanRange_TO in (' + @cols_to + ')
    ) AS V' ;

    exec sp_executesql @query ;
Output
Output

I want to ensure that any missing data resulting in NULL values during the pivot operation is instead represented as 0 in the output. How can I achieve this modification in the T-SQL procedure?

Note: The data is Dynamic
